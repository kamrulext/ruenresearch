{
  "hash": "a888394401a323d05e4808a15cadbc13",
  "result": {
    "markdown": "---\ntitle: \"Data Analysis Using R\"\nauthor: \"Professor Dr. Md. Kamrul Hasan\"\nformat:\n  revealjs:\n    smaller: false\n    scrollable: true\n    incremental: true\n    code-block-height: 650px\n    logo: \"/images/logo.png\"\n    footer: \"RUEN Research\"\n    transition: slide\n    slide-number: c/t\n    multiplex: false\n    embed-resources: false\n    chalkboard: true\n---\n\n\n## Why R?\n\n-   R is a free software environment for statistical computing and graphics.\n-   It is widely used among statisticians and data miners for developing statistical software and data analysis.\n-   R is highly extensible and has a large number of packages for various statistical techniques.\n-   R is command driven, so its potentiality is literally unlimited.\n-   Code sharing is easy and reproducibility is ensured.\n\n## Installation\n\n-   Download R and RStudio from [R and RStudio](https://posit.co/download/rstudio-desktop/).\n-   Install R and RStudio, which is an integrated development environment (IDE) for R.\n-   Open RStudio and set up your working directory using and other options in the Tools \\> Global Options...\n-   Explore and play with RStudio interface, including the console, script editor, environment pane, and plots pane.\n-   Instruction [link](https://youtu.be/fnpchOccshE)\n\n## What will we cover?\n\n-   Research design and data collection\n-   Data entry and cleaning\n-   Basic R syntax and data types\n-   Data structures: vectors, matrices, lists, and data frames\n-   Importing and exporting data\n-   Data manipulation with dplyr and tidyr\n-   Data visualization with ggplot2\n-   Statistical analysis: chi-square test, t-tests, ANOVA, correlation, regression\n\n## Basic R Syntax\n\n::: panel-tabset\n### Code\n\n``` r\n# This is a comment\nx <- 5  # Assigning a value to a variable x\n3 -> y  # Another way to assign a value to y\nz = 8 # Simple way of assigning a value to z\nx # Print the value of x\ny # Print the value of y\nz # Print the value of z\nx + y  # Perform addition\nx * y  # Perform multiplication\nx / y  # Perform division\nx^2  # Square of x\nsqrt(x)  # Square root of x\nx > y  # Check if x is greater than y\nx == y  # Check if x is equal to y\nx != y  # Check if x is not equal to y\ny %/% x  # Integer division\ny %% x  # Modulus operation\n```\n\n### Output\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.666667\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.236068\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n:::\n\n## Basic R Syntax\n\n::: panel-tabset\n### Code\n\n``` r\nlog(1000) # Natural logarithm of 1000\nlog10(1000) # Base 10 logarithm of 1000\nsin(pi/2) # Sine of pi/2\n\ndegree = 45\nradian = degree * (pi / 180) # Convert degrees to radians\ntan(radian) # Tangent of the angle in radians\n```\n\n### Output\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.907755\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n:::\n\n## Data Structures\n\n::: panel-tabset\n### Data codes\n\n``` r\n# Vectors\nv = c(1, 2, 3, 4, 5)  # Create a numeric vector\nv_char = c(\"a\", \"b\", \"c\")  # Create a character vector\n# Matrices\nm = matrix(1:9, nrow=3, ncol=3)  # Create a 3x3 matrix\nm2 = matrix(1:12, nrow=3, ncol=4)  # Create a 3x4 matrix\n# Lists\nlist = list(name=\"John\", age=30, scores=c(90, 85, 88))  # Create a list\n# Data Frames by combing vectors\nname = c(\"Alice\", \"Bob\", \"Charlie\")\nage = c(25, 30, 35)\nscores = c(90, 85, 88)\ndf = data.frame(name, age, scores)  # Create a data frame\n```\n\n\n::: {.cell}\n\n:::\n\n\n### Index codes\n\n``` r\nv = c(1, 2, 3, 4, 5) # Accessing elements in vectors\nv[1]  # First element\nv[2:4]  # Elements from index 2 to 4\n\nm = matrix(1:9, nrow=3, ncol=3) # Accessing elements in matrices\nm[1, 2]  # Element in first row, second column\nm[2, ]  # Second row\nm[, 3]  # Third column\n# Accessing elements in lists\nlist = list(name=\"John\", age=30, scores=c(90, 85, 88))\nlist$name  # Access the 'name' element\nlist[[2]]  # Access the second element (age)\n# Accessing elements in data frames\ndf = data.frame(name=c(\"Alice\", \"Bob\", \"Charlie\"), age=c(25, 30, 35), scores=c(90, 85, 88))\ndf$name  # Access the 'name' column\ndf[1, ]  # Access the first row\ndf[2, \"age\"]  # Access the 'age' of the second row\n```\n\n### Accessed elements\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 5 8\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7 8 9\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"John\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n   name age scores\n1 Alice  25     90\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30\n```\n:::\n:::\n\n:::\n\n## Accessing elements in data frames using dplyr {.smaller}\n\n-   First you need to install the library by `install.packages(\"dplyr\")`.\n-   Then you can load the library using `library(dplyr)`.\n-   You can also manage libraries using the Packages options in Tools in RStudio.\n-   The easiest way to managme packages using 'pacman' package.\n-   Install it using `install.packages(\"pacman\")`.\n-   Then you can load other packages using `pacman::p_load(dplyr, ggplot2, tidyr, car, jtools, kableExtra)`.\n\n## Accessing elements in data frames using dplyr\n\n::: panel-tabset\n### Code\n\n``` r\nlibrary(dplyr)\ndf = data.frame(name=c(\"Alice\", \"Bob\", \"Charlie\"), \n                age=c(25, 30, 35), \n                scores=c(90, 85, 88))\n\ndf %>% \n  filter(age > 28)  # Filter rows where age is greater than 28\n\ndf %>%\n  select(name, scores)  # Select specific columns\n```\n\n### Output\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n     name age scores\n1     Bob  30     85\n2 Charlie  35     88\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n     name scores\n1   Alice     90\n2     Bob     85\n3 Charlie     88\n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}